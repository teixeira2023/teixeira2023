#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Dashboard de Criptomoedas
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 7):
        print("‚ùå Erro: Python 3.7 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    try:
        import flask
        import requests
        import pandas
        import plotly
        print("‚úÖ Todas as depend√™ncias est√£o instaladas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia n√£o encontrada: {e}")
        print("Execute: pip install -r requirements.txt")
        return False

def install_dependencies():
    """Instala as depend√™ncias se necess√°rio"""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def create_env_file():
    """Cria arquivo .env se n√£o existir"""
    env_file = Path(".env")
    if not env_file.exists():
        print("üìù Criando arquivo .env...")
        env_content = """# Configura√ß√µes da API LLM Stats
# Atualmente os dados s√£o simulados baseados no site LLM Stats
# Para dados reais, seria necess√°rio implementar web scraping ou usar uma API oficial
# Se voc√™ tiver uma chave API, descomente a linha abaixo
# API_KEY=sua_chave_api_aqui

# Configura√ß√µes do Flask
FLASK_ENV=development
FLASK_DEBUG=True
"""
        with open(env_file, "w", encoding="utf-8") as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando Dashboard de LLMs - LLM Stats")
    print("=" * 50)
    
    # Verificar vers√£o do Python
    check_python_version()
    
    # Verificar depend√™ncias
    if not check_dependencies():
        print("\nüì¶ Tentando instalar depend√™ncias automaticamente...")
        if not install_dependencies():
            print("\n‚ùå Falha ao instalar depend√™ncias automaticamente")
            print("Execute manualmente: pip install -r requirements.txt")
            sys.exit(1)
    
    # Criar arquivo .env se necess√°rio
    create_env_file()
    
    print("\nüéØ Iniciando servidor...")
    print("üì± Acesse: http://localhost:5000")
    print("üõë Para parar o servidor, pressione Ctrl+C")
    print("=" * 50)
    
    # Executar a aplica√ß√£o
    try:
        from app import app
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Servidor parado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar servidor: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 